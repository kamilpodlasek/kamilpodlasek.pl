const charsGenerator = {
    ' ': () => [],
    A: ({ h, w }) => [[0, h], [w / 2, 0], [w, h], [(w / 4) * 3, h / 2], [w / 4, h / 2]],
    C: ({ h, w }) => [[w, h], [0, h], [0, 0], [w, 0]],
    D: ({ h, w }) => [[0, h], [0, 0], [w, h / 5], [w, (h / 5) * 4], [0, h]],
    E: ({ h, w }) => [[w, h], [0, h], [0, h / 2], [w, h / 2], [0, h / 2], [0, 0], [w, 0]],
    I: ({ h, w }) => [[w / 2, h], [w / 2, 0]],
    J: ({ h, w }) => [[0, (h / 4) * 3], [0, h], [w, h], [w, 0]],
    K: ({ h, w }) => [[0, h], [0, 0], [0, h / 2], [w, 0], [0, h / 2], [w, h]],
    L: ({ h, w }) => [[0, 0], [0, h], [w, h]],
    M: ({ h, w }) => [[0, h], [0, 0], [w / 2, h / 2], [w, 0], [w, h]],
    O: ({ h, w }) => [[0, h], [0, 0], [w, 0], [w, h], [0, h]],
    P: ({ h, w }) => [[0, h], [0, 0], [w, 0], [w, h / 2], [0, h / 2]],
    R: ({ h, w }) => [[0, h], [0, 0], [w, 0], [w, h / 2], [0, h / 2], [w, h]],
    S: ({ h, w }) => [[0, h], [w, h], [w, h / 2], [0, h / 2], [0, 0], [w, 0]],
    T: ({ h, w }) => [[w / 2, h], [w / 2, 0], [0, 0], [w, 0]],
    V: ({ h, w }) => [[0, 0], [w / 2, h], [w, 0]],
};

const charsLinesGenerator = {
    ' ': () => [],
    '!': ({ h, w }) => [[[(w / 10) * 4, h], [(w / 10) * 6, h]], [[w / 2, 0], [w / 2, (h / 6) * 5]]],
    ',': ({ h, w }) => [
        [[(w / 16) * 8, h], [(w / 16) * 9, (h / 10) * 11]],
        [[(w / 16) * 9, (h / 10) * 11], [(w / 16) * 7, (h / 10) * 12]],
    ],
    '-': ({ h, w }) => [[[0, h / 2], [w, h / 2]]],
    '.': ({ h, w }) => [[[(w / 10) * 4, h], [(w / 10) * 6, h]]],
    '?': ({ h, w }) => [
        [[(w / 10) * 4, h], [(w / 10) * 6, h]],
        [[0, h / 5], [w / 5, 0]],
        [[w / 5, 0], [(w / 5) * 4, 0]],
        [[(w / 5) * 4, 0], [w, h / 5]],
        [[w, h / 5], [w, h / 2]],
        [[w, h / 2], [w / 2, (h / 6) * 5]],
    ],
    A: ({ h, w }) => [
        [[0, h], [w / 2, 0]],
        [[w, h], [w / 2, 0]],
        [[w / 4, h / 2], [(w / 4) * 3, h / 2]],
    ],
    B: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, 0], [w, h / 6]],
        [[w, h / 6], [w, (h / 6) * 5]],
        [[0, h / 2], [w, h / 2]],
        [[w, (h / 6) * 5], [0, h]],
    ],
    C: ({ h, w }) => [[[0, h], [w, h]], [[0, 0], [0, h]], [[0, 0], [w, 0]]],
    D: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, 0], [w, h / 6]],
        [[w, h / 6], [w, (h / 6) * 5]],
        [[w, (h / 6) * 5], [0, h]],
    ],
    E: ({ h, w }) => [[[0, h], [w, h]], [[0, 0], [0, h]], [[0, 0], [w, 0]], [[0, h / 2], [w, h / 2]]],
    F: ({ h, w }) => [[[0, 0], [0, h]], [[0, 0], [w, 0]], [[0, h / 2], [w, h / 2]]],
    G: ({ h, w }) => [
        [[0, h], [w, h]],
        [[0, 0], [0, h]],
        [[0, 0], [w, 0]],
        [[w, h], [w, (h / 3) * 2]],
        [[(w / 3) * 2, (h / 3) * 2], [w, (h / 3) * 2]],
    ],
    H: ({ h, w }) => [[[0, 0], [0, h]], [[0, h / 2], [w, h / 2]], [[w, 0], [w, h]]],
    I: ({ h, w }) => [[[w / 2, 0], [w / 2, h]]],
    J: ({ h, w }) => [[[0, (h / 4) * 3], [0, h]], [[0, h], [w, h]], [[w, 0], [w, h]]],
    K: ({ h, w }) => [[[0, 0], [0, h]], [[0, h / 2], [w, 0]], [[0, h / 2], [w, h]]],
    L: ({ h, w }) => [[[0, 0], [0, h]], [[0, h], [w, h]]],
    M: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, 0], [w / 2, h / 2]],
        [[w / 2, h / 2], [w, 0]],
        [[w, 0], [w, h]],
    ],
    N: ({ h, w }) => [[[0, 0], [0, h]], [[0, 0], [w, h]], [[w, 0], [w, h]]],
    O: ({ h, w }) => [[[0, 0], [0, h]], [[0, h], [w, h]], [[0, 0], [w, 0]], [[w, 0], [w, h]]],
    P: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, 0], [w, 0]],
        [[w, 0], [w, h / 2]],
        [[0, h / 2], [w, h / 2]],
    ],
    Q: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, h], [w, h]],
        [[0, 0], [w, 0]],
        [[w, 0], [w, h]],
        [[(w / 4) * 3, (h / 10) * 9], [(w / 5) * 6, (h / 10) * 11]],
    ],
    R: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, 0], [w, 0]],
        [[w, 0], [w, h / 2]],
        [[0, h / 2], [w, h / 2]],
        [[0, h / 2], [w, h]],
    ],
    S: ({ h, w }) => [
        [[0, 0], [w, 0]],
        [[0, 0], [0, h / 2]],
        [[0, h / 2], [w, h / 2]],
        [[w, h / 2], [w, h]],
        [[0, h], [w, h]],
    ],
    T: ({ h, w }) => [[[0, 0], [w, 0]], [[w / 2, 0], [w / 2, h]]],
    U: ({ h, w }) => [[[0, 0], [0, h]], [[0, h], [w, h]], [[w, 0], [w, h]]],
    V: ({ h, w }) => [[[0, 0], [w / 2, h]], [[w, 0], [w / 2, h]]],
    W: ({ h, w }) => [
        [[0, 0], [0, h]],
        [[0, h], [w / 2, h / 2]],
        [[w / 2, h / 2], [w, h]],
        [[w, 0], [w, h]],
    ],
    X: ({ h, w }) => [[[0, h], [w, 0]], [[0, 0], [w, h]]],
    Y: ({ h, w }) => [[[0, 0], [w / 2, h / 2]], [[w, 0], [w / 2, h / 2]], [[w / 2, h / 2], [w / 2, h]]],
    Z: ({ h, w }) => [[[0, 0], [w, 0]], [[0, h], [w, 0]], [[0, h], [w, h]]],
};

const generators = {
    flashing: charsGenerator,
    scatteredLines: charsLinesGenerator,
};

export const generateData = ({ type, text, charHeight, charWidth }) =>
    Array.from(text.toUpperCase()).map(char => generators[type][char]({ h: charHeight, w: charWidth }));
